apply plugin: 'java'
apply plugin: 'edu.sc.seis.macAppBundle'
apply plugin: 'nebula.ospackage'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
compileJava.options.incremental = true

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.crashinvaders.texturepackergui.desktop.ApplicationStarter"
project.ext.distFileName = "$project.appName-$project.ext.version"
project.ext.resourceDirs = files('resources/', "$rootDir/assets/")

dependencies {
    runtimeOnly files(project.resourceDirs)
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.crashinvaders.lml:gdx-autumn-fcs:$lmlVersion"
    implementation "args4j:args4j:$args4jVersion"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    classpath(project.resourceDirs)
    standardInput = System.in
    ignoreExitValue = true

    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        jvmArgs += ['-XstartOnFirstThread', '-Djava.awt.headless=true']
    }
}

task dist(type: Jar) {
    dependsOn configurations.runtimeClasspath
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) } with jar

    // Exclude unnecessary JARs that bundled with Tinify Maven artifact.
    // Remove after https://github.com/tinify/tinify-java/issues/9 gets resolved.
    exclude("/gson-*.jar",
            "/okhttp-*.jar",
            "/okio-*.jar")

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

// Create fat and OS based (stripped natives) distribution release tasks with names "distRelease[Platform]".
void generateDistReleaseTasks() {
    def osFamilyList = [
            OperatingSystemFamily.LINUX,
            OperatingSystemFamily.MACOS,
            OperatingSystemFamily.WINDOWS,
            null]
    osFamilyList.each {String osFamily ->
        String taskName = "distRelease" + (osFamily != null ? toCamelCase(osFamily, true) : "")
//        println "Creating task \"$taskName\""
        tasks.create(name: taskName, type: Jar) {
            group 'Distribution'
            description 'Generates a destributable JAR file' + (osFamily != null ? " for ${toCamelCase(osFamily, true)}." : ".")

            dependsOn configurations.runtimeClasspath
            from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) } with jar

            // Exclude unnecessary JARs that bundled with Tinify Maven artifact.
            // Remove after https://github.com/tinify/tinify-java/issues/9 gets resolved.
            exclude("/gson-*.jar",
                    "/okhttp-*.jar",
                    "/okio-*.jar")

            manifest {
                attributes 'Main-Class': project.mainClassName
            }

            def osFamilySuffix = osFamily != null ? "-${osFamily.toLowerCase()}" : ""
            archiveFileName = "$project.appName$osFamilySuffix.$extension"
            destinationDirectory = file("$rootDir/distribution/output")

            // Strip the natives unused by the current platform.
            if (osFamily != null) {
                if (OperatingSystemFamily.LINUX != osFamily)
                    exclude("**/*.so",
                            "**/*.so.*",
                            "/etctool/etctool-linux")
                if (OperatingSystemFamily.WINDOWS != osFamily)
                    exclude("**/*.dll",
                            "**/*.dll.*",
                            "/etctool/etctool.exe")
                if (OperatingSystemFamily.MACOS != osFamily)
                    exclude("**/*.dylib",
                            "**/*.dylib.*",
                            "/etctool/etctool-mac")
            }
        }
    }
}
generateDistReleaseTasks()

task zipRelease(type: Zip) {
    from distRelease
    from file("../distribution/files")
    archiveFileName = "$project.distFileName.$extension"
    destinationDirectory = file("$rootDir/distribution/output")
}
zipRelease.dependsOn distRelease

//region Windows distribution (NSIS Installer).
/**
 * Task to create Windows installer using NSIS.
 *
 * In order to make it work, you need:
 *     1. Windows OS only.
 *     2. NSIS 3 installed on your system and added to PATH (makensis.exe).
 *          https://sourceforge.net/projects/nsis/files/
 *     3. FileAssoc macros should be installed.
 *          Copy code from http://nsis.sourceforge.net/FileAssoc
 *          into file "FileAssoc.nsh" and put it under "<NSIS_DIR>/Include/"
 *
 * After task execution, the output files can be found under "./distribution/output/".
 */
task nsisInstaller(type: Exec) {
    group 'NSIS Installer'
    description 'Assembles a Windows NSIS installer distribution.'

    // NSIS installer can be created only on Windows.
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return
    }

    workingDir '../distribution'

    def nsisCommand = "makensis /DFILENAME=\"$project.distFileName\" installer-nsis.nsi"
    commandLine 'cmd', '/c', "$nsisCommand"
}
nsisInstaller.dependsOn distReleaseWindows
//endregion

//region MacOS distribution (Mac App Bundle).
macAppBundle {
    mainClassName = project.mainClassName
    bundleIdentifier = 'com.crashinvaders.texturepackergui'
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    javaExtras.put("-XstartOnFirstThread", null)
    javaExtras.put("-Djava.awt.headless", "true")
    bundleJRE = false
    appName = "GDX Texture Packer"
    dmgName = "gdx-texturepacker-$project.ext.version"
    icon = "icons.icns"
//    backgroundImage = "doc/macbackground.png"
}

// Since macAppBundle 2.1.6 doesn't let us customize jar assembling, we have to swap files by hand.
task cleanAppJavaDir (type: Delete) {
    delete fileTree(dir: "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java")
}
task copyUberJar (type: Copy) {
    from 'build/libs/desktop.jar'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java"
}
task copyMacAppFiles (type: Copy) {
    from '../distribution/macApp'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents"
}
createApp.dependsOn copyUberJar, copyMacAppFiles
copyUberJar.dependsOn dist, cleanAppJavaDir
cleanAppJavaDir.dependsOn generatePlist
//endregion

//region Linux distribution (ospackage).
// https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki
ospackage {
    release = 1
    version = project.ext.version
    packageName = project.appName
    os = 'LINUX' // only applied to RPM

    vendor 'Crashinvaders'
    url 'https://github.com/crashinvaders/gdx-texture-packer-gui'
    maintainer 'Anton Chekulaev <anton@crashinvaders.com>'
    summary 'LibGDX texture atlas packer GUI'
    packageDescription 'A simple utility to help you pack and manage texture atlases for LibGDX game framework. It\'s mostly just a visual wrapper over LibGDX TexturePacker classes and provides a convenient way to use it.'
    license file("$rootDir/distribution/license.txt").text

    // JRE 8 is the minimum supported runtime.
    requires "java8-runtime"

    postInstall '#!/usr/bin/env bash\n' +
            'sudo update-mime-database /usr/share/mime\n' +
            'sudo update-icon-caches /usr/share/icons/hicolor'

    def installationDir = '/opt/gdx-texture-packer'
    into installationDir

    from("$rootDir/distribution/output/${project.appName}-linux.jar")
    from("$rootDir/distribution/files/launcher_linux.sh") { fileMode 0555 }
    from("$rootDir/distribution/files/readme.txt")
    from("$rootDir/distribution/files/readme_hotkeys.txt")
    from("$rootDir/distribution/license.txt")

    from("$rootDir/resources/icon256.png") {
        into '/usr/share/icons/hicolor/256x256/mimetypes'
        rename { 'application-gdx-tp-project.png' }
    }
    from("$rootDir/resources/icon256.png") {
        into '/usr/share/icons/hicolor/256x256/apps'
        rename { 'gdx-texture-packer.png' }
    }

    from(new File("$project.buildDir/tmp", 'gdx-texture-packer.desktop').with {
        it.parentFile.mkdirs()
        it.write """[Desktop Entry]
                |Name=GDX Texture Packer
                |GenericName=Texture Packer
                |Comment=$summary
                |Version=$version
                |Keywords=texture;atlas;gdx;libgdx;packer;
                |Type=Application
                |Categories=Graphics;Development;
                |MimeType=application/gdx-tp-project;
                |Terminal=false
                |Exec=$installationDir/launcher_linux.sh %U
                |Icon=gdx-texture-packer""".stripMargin()
        return it.absolutePath
    }) {
        into '/usr/share/applications/'
    }

    from("$rootDir/distribution/linux-packages/project-mime-type.xml") {
        rename { 'gdx-texture-packer.xml' }
        into '/usr/share/mime/packages/'
    }
}

buildRpm {
    group 'OSPackage'
    description 'Assembles an RPM Linux distribution package.'
    dependsOn distReleaseLinux
}

buildDeb {
    group 'OSPackage'
    description 'Assembles a DEB Linux distribution package.'
    dependsOn distReleaseLinux
}
//endregion

//region Utils
static String toCamelCase(String text, boolean capitalized = false) {
    text = text.replaceAll("(_)([A-Za-z0-9])", { String[] it -> it[2].toUpperCase() })
    return capitalized ? text.capitalize() : text
}

static String toSnakeCase(String text) {
    text.replaceAll(/([A-Z])/, /_$1/).toLowerCase().replaceAll(/^_/, '')
}
//endregion